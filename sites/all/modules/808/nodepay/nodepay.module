<?php
/*
 * implements hook menu
 */
function nodepay_menu(){
    $items['pay/node/%'] = array(
        'title' => t('Pay for node'),
        'page callback' => 'gdocview_pay_for_node',
        'description' => 'Pay to view a node',
        'access arguments' => array('access pay'),
        'page arguments' => array(2),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['node/%/buyed_report'] = array(
        'title' => t('Administrate nodebuyes'),
        'page callback' => 'nodebuyes_report',
        'page arguments' => array(1),
        'access callback' => 'nodepay_report',
        'access arguments' => array(1),
        'description' => t('Administrate nodebuyes'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 100,
    );

    return $items;
}

function nodepay_report($nid) {
    $node = node_load($nid);
    global $user;
    if (user_has_role(9 , $user) || user_has_role(3 , $user) ) {
        return TRUE;
    }
    return FALSE;
}

function gdocview_pay_for_node($nid) {
    global $user;
    if($user->uid < 1){
        drupal_set_message(t('to complete this operation you must login first, !login - !regiater', array(
            '!login' => l(t('User login'), 'user/login'),
            '!regiater' => l(t('User register'), 'user/register'),
        )), 'error');
        drupal_goto("node/". $nid);
    }
    if($node = node_load($nid)){
        if (isset($node->field_point_needed['und'][0])) {
            $points = $node->field_point_needed['und'][0]['value'];
        }else{
            drupal_set_message(t('خطایی در فرم رخ داده است. لطفا با پشتیبانی تماس حاصل فرمایید. کد خطا: 15'), 'error');
            drupal_goto("node/". $nid);
        }

        $flag = false; //default value for discount flag
        /*
        * برای تخفیفات ویژه نوروز که تمامی محتوا ها تخفیف داشتند
        *
        $flag = true;
        $festival = 'جشنواره نوروز';
        for ( $i=0 ; $i < count( $node->field_isvip['und'] ) ; $i++){
            if( $node->field_isvip['und'][$i]['tid'] == 2217) // no discount will be applied
                $flag=false;
        }
        if($flag){
            $points = round(intval($points*0.6) , -2);
            drupal_set_message('40 درصد تخفیف به مناسبت '. $festival .' برای شما اعمال شد.');
        }
        */

        $num_pts = userpoints_get_current_points($user->uid, 'all');
        if ($num_pts < $points) {
            drupal_set_message(t("You haven't enough point in your account, please charge your account."), 'error');
            drupal_goto("node/$nid");
        }
        $description =  ($flag)? ' با 40 درصد تخفیف ' . $festival :'';

        $_sql = "INSERT INTO {m_buyed_nodes} (uid, nid, date, price, description) VALUES (:uid, :nid, :date, :price, :description)";
        if($sht = db_query($_sql, array( ':uid' => $user->uid, ':nid' => $nid, ':date' => time(), ':price' => $points, ':description' => $description ))){
            $desc = 'پرداخت برای محتوای #'. $nid ;
            $desc .= $description;
            $params = array(
                'uid' => $user->uid,
                'points' => -$points,
                'operation' => 'pey for node',
                'description' => $desc,
                'entity_id' => $nid,
                'entity_type' => 'node',
            );
            userpoints_userpointsapi($params);
        }else{
            drupal_set_message(t('خطایی در فرم رخ داده است. لطفا با پشتیبانی تماس حاصل فرمایید. کد خطا: 16'), 'error');
            drupal_goto("node/". $nid);
        }

        $field_percent = db_query(_queries('field'), array(':nid' => $nid));
        $total = $points;
        $buy_id = db_select('m_buyed_nodes', 'n')->fields('n',array('id'))->condition('n.nid' , $nid)->condition('n.uid' , $user->uid)->execute()->fetchObject();

        foreach ($field_percent as $field_item){
            $multiplier = $field_item->portion / 100;
            $uid = $field_item->uid;
            $is_cost = $field_item->cost;

            $query = db_query("SELECT * FROM {up_share_log} WHERE uid = :uid AND buyer_uid = :buyer_uid AND entity_id = :entity_id AND entity_type = :entity_type AND field_id = :field_id", array(':uid' => $uid, ':buyer_uid' => $user->uid, ':entity_id' => $buy_id->id, ':entity_type' => $node->type, ':field_id' => $field_item->field_id))->fetchObject();
            $allow_points = TRUE;
            if (isset($query->uid) && $query->uid) {
                $allow_points = FALSE;
            }

            $points = intval(($total * $multiplier));
            if ($allow_points && $points > 0) {
                $params = array(
                    'tid' => 0,
                    'uid' => $uid,
                    'points' => $points,
                    'operation' => 'content share',
                    'description' => t('user @uid has bought node @nid that you had a share of it.', array('@uid' => $user->uid , '@nid' => $nid)),
                    'entity_id' => $nid,
                    'entity_type' => 'node',
                );
                $st = userpoints_userpointsapi($params);
                db_insert('up_share_log')
                    ->fields(array(
                        'uid' => $uid,
                        'buyer_uid' => $user->uid,
                        'entity_id' => $buy_id->id,
                        'entity_type' => $node->type,
                        'field_id' => $field_item->field_id,
                        'points' => $points,
                        'portion' => $field_item->portion,
                        'model' => $nid,
                        'total' => $total,
                        'updated' => time(),
                    ))->execute();


                $node = node_load($nid);
                privatemsg_new_thread(
                    array(user_load($uid)),
                    'محتوایی از شما فروخته شد.',
                    'محتوای ' . l($node->title, '/node/' . $nid) . ' توسط ' . l($user->name, '/user/' . $user->uid) . ' خریداری شده است. ',
                    array('author' => user_load(2), 'format' => 'full_html')
                );
            }
            if($is_cost) $total -= $points;
        }

        drupal_goto("node/$nid");
    }
}

function nodebuyes_report($id) {
    // Setting the sort conditions
    if(isset($_GET['sort']) && isset($_GET['order'])) {
        // Sort it Ascending or Descending?
        if($_GET['sort'] == 'asc') $sort = 'ASC';
        else $sort = 'DESC';
        // Which column will be sorted
        switch($_GET['order']) {
            case 'Date':
                $order = 'date';
                break;
            default:
                $order = 'date';
        }
    }
    else {
        $sort = 'DESC';
        $order = 'date';
    }
    $q = db_select('m_buyed_nodes','n')->extend('PagerDefault')->extend('TableSort')->limit(50);
    $q->join('node', 'node', 'n.nid = node.nid');
    $q->orderBy($order, $sort);
    $q->fields('n', array())->fields('node', array('nid', 'title'));

    if($id) $q->condition('n.nid' , intval($id));

    $rows = $q->execute()->fetchAll();
    $tabale_header = array(
        t('index'),
        t('User'),
        t('Content'),
        t('Price'),
        array( 'data' => t('Date'), 'field' => 'date'),
        t('Description')
    );
    $table_rows = array();
    $index = 1;
    $total_price = 0;
    foreach ($rows as $r) {
        $node = node_load($r->nid);
        $title = l(mb_substr($r->title, 0, 50,'UTF-8') .'...', 'admin/money/nodebuyes/'.$r->nid);
        $user = user_load($r->uid);
        if($r->type =='education') {
            $tic = unserialize($r->value);
            $price =0;
            foreach($tic as $t ) {
                $price += intval($t['price']);
                $title .="  |  " . $t['ticket'] . "";
            }
        }else{
            if (isset($r->price)) {
                $price = $r->price;
            }else if(isset($node->field_point_needed['und'][0])){
                $price = $node->field_point_needed['und'][0]['value'];
            }else{
                $price = 0;
            }
        }
        $total_price += $price;
        $table_rows[] = array(
            $index ,
            l($user->name, 'user/'.$r->uid),
            $title,
            formatMoney($price),
            format_date($r->date, 'date_time'),
            $r->description
        );
        $index ++ ;
        $email_addresses[] = $user->mail;  //add to the list
    }
    array_unshift($table_rows ,
        array(
            '',
            '' ,
            '<p style="text-align:center;font-weight: bold;font-size: 15px;margin: 0;">مجموع کل این صفحه</p>' ,
            '<p style="text-align:center;font-weight: bold;font-size: 15px;margin: 0;">' . formatMoney($total_price) .' تومان</p>',
            '' ,
            ''));
    $output = theme('table', array('header' => $tabale_header, 'rows' => $table_rows)).theme('pager');
    $output .= '<div class="email-addresses"><h4>Email Addresses</h4><label for="email-addresses-textarea" value="Email addresses:" /><textarea id="email-addresses-textarea" rows="5" cols="500">' . implode(', ', $email_addresses). '</textarea></div>';

    return $output;
}

/**
 * Implements hook_uc_order().
 */
function nodepay_uc_order($op, &$order) {
    if ($op == 'presave') {
        //check to see if order is in checkout or not
        if (uc_order_status_data($order->order_status, 'state') == 'in_checkout') {
            $subtotal = $items_count = 0;
            $vip_line_item = array();
            foreach ($order->line_items as $index => $line) {
                if ($line['type'] == 'subtotal') {
                    $subtotal = $line['amount'];
                }elseif ($line['type'] == 'vip'){
                    if($items_count > 0){
                        //there is more than 1 line item by mistake, so delete it
                        uc_order_delete_line_item($line['line_item_id']);
                    }else{
                        $vip_line_item = $line;
                        $vip_line_item['index'] = $index;
                        $items_count ++;
                    }
                }
            }
            // Handle line items.
            $user = user_load($order->uid);
            if (isset($vip_line_item['amount']) && $vip_line_item['amount'] != 0 && isset($user->roles[8])) {
                $line =& $order->line_items[$vip_line_item['index']];
                $line['amount'] = -$subtotal / 10;
                uc_order_update_line_item($line['line_item_id'], $line['title'], $line['amount']);
            }
            else {
                // Create a new line item.
                $order->line_items[] = uc_order_line_item_add($order->order_id, 'vip',
                    _uc_line_item_data('vip', 'title'),
                    -$subtotal / 10,
                    _uc_line_item_data('vip', 'weight')
                );
            }
        }
    }
}

/**
 * Implements hook_uc_line_item().
 */
function nodepay_uc_line_item() {
    $items['vip'] = array(
        'title' => '10% تخفیف کاربران VIP',
        'weight' => 3,
        'default' => FALSE,
        'stored' => TRUE,
        'add_list' => TRUE,
        'calculated' => TRUE,
        'display_only' => FALSE
    );
    return $items;
}
