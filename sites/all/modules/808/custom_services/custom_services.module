<?php/** * Implements hook_services_resources(). */function custom_services_services_resources(){	return array(        'preRequests' => array(            'operation' => array(                'index' => array(                    'help' => 'return forced update status and encode key',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_service_resource'),                    'callback' => 'custom_service_resource_index',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'hash',                            'type' => 'string',                            'description' => 'The hash of url.',                            'source' => array('param' => 'hash'),                            'optional' => False,                        ),                        array(                            'name' => 'version',                            'type' => 'int',                            'description' => 'The version of app.',                            'source' => array('param' => 'version'),                            'optional' => TRUE,                            'default value' => 0,                        ),                    ),                ),            ),        ),        'questions' => array(            'operations' => array(                'index' => array(                    'help' => 'return all the questions',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'question_resource'),                    'callback' => 'question_resource_index',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'hash',                            'type' => 'string',                            'description' => 'The hash of url.',                            'source' => array('param' => 'hash'),                            'optional' => False,                        ),                        array(                            'name' => 'domain',                            'type' => 'string',                            'description' => 'The domain of list.',                            'source' => array('param' => 'domain'),                            'optional' => False,                        ),                        array(                            'name' => 'page',                            'type' => 'int',                            'description' => 'The page of list.',                            'source' => array('param' => 'page'),                            'optional' => TRUE,                            'default value' => 0,                        ),                        array(                            'name' => 'version',                            'type' => 'int',                            'description' => 'The version of app.',                            'source' => array('param' => 'version'),                            'optional' => TRUE,                            'default value' => 0,                        ),                    ),                ),                'retrieve' => array(                    'help' => 'Retrieve a question',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'question_resource'),                    'callback' => 'question_resource_retrieve',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'hash',                            'type' => 'string',                            'description' => 'The hash of url.',                            'source' => array('param' => 'hash'),                            'optional' => False,                        ),                        array(                            'name' => 'nid',                            'optional' => FALSE,                            'source' => array('path' => 0),                            'type' => 'int',                            'description' => 'The nid of the question to retrieve',                        ),                        array(                            'name' => 'version',                            'type' => 'int',                            'description' => 'The version of app.',                            'source' => array('param' => 'version'),                            'optional' => TRUE,                            'default value' => 0,                        ),                    ),                ),                'create' => array(                    'help' => 'Create a question',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'question_resource'),                    'callback' => 'question_resource_create',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'hash',                            'type' => 'string',                            'description' => 'The hash of url.',                            'source' => array('param' => 'hash'),                            'optional' => False,                        ),                        array(                            'name' => 'question',                            'optional' => FALSE,                            'source' => 'data',                            'description' => 'The question data to create',                            'type' => 'array',                        ),                        array(                            'name' => 'version',                            'type' => 'int',                            'description' => 'The version of app.',                            'source' => array('param' => 'version'),                            'optional' => TRUE,                            'default value' => 0,                        ),                    ),                ),            ),            'actions' => array(),            'targeted_actions' => array(                'edit' => array(                    'help' => 'Retrieve a question',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'question_resource'),                    'callback' => 'question_resource_edit',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'hash',                            'type' => 'string',                            'description' => 'The hash of url.',                            'source' => array('param' => 'hash'),                            'optional' => False,                        ),                        array(                            'name' => 'nid',                            'optional' => FALSE,                            'source' => array('path' => 0),                            'type' => 'int',                            'description' => 'The nid of the question to update',                        ),                        array(                            'name' => 'question',                            'optional' => FALSE,                            'source' => 'data',                            'description' => 'The question data to update',                            'type' => 'array',                        ),                        array(                            'name' => 'version',                            'type' => 'int',                            'description' => 'The version of app.',                            'source' => array('param' => 'version'),                            'optional' => TRUE,                            'default value' => 0,                        ),                    ),                ),                'follow' => array(                    'help' => 'Follow a question',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'question_resource'),                    'callback' => 'question_resource_follow',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'hash',                            'type' => 'string',                            'description' => 'The hash of url.',                            'source' => array('param' => 'hash'),                            'optional' => False,                        ),                        array(                            'name' => 'nid',                            'optional' => FALSE,                            'source' => array('path' => 0),                            'type' => 'int',                            'description' => 'The nid of the question to follow',                        ),                        array(                            'name' => 'data',                            'type' => 'array',                            'description' => 'Follow or unfollow data',                            'source' => 'data',                            'optional' => FALSE,                        ),                        array(                            'name' => 'version',                            'type' => 'int',                            'description' => 'The version of app.',                            'source' => array('param' => 'version'),                            'optional' => TRUE,                            'default value' => 0,                        ),                    ),                ),                'vote' => array(                    'help' => 'Vote a question',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'question_resource'),                    'callback' => 'question_resource_vote',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'hash',                            'type' => 'string',                            'description' => 'The hash of url.',                            'source' => array('param' => 'hash'),                            'optional' => False,                        ),                        array(                            'name' => 'nid',                            'optional' => FALSE,                            'source' => array('path' => 0),                            'type' => 'int',                            'description' => 'The nid of the question to vote',                        ),                        array(                            'name' => 'data',                            'type' => 'array',                            'description' => 'Vote up or down',                            'source' => 'data',                            'optional' => FALSE,                        ),                        array(                            'name' => 'version',                            'type' => 'int',                            'description' => 'The version of app.',                            'source' => array('param' => 'version'),                            'optional' => TRUE,                            'default value' => 0,                        ),                    ),                ),            ),            'relationships' => array(            ),        ),		'pedia' => array(		    'operations' => array(		        'index' => array(                    'help' => 'return all pedia',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'pedia_resource'),                    'callback' => 'pedia_resource_index',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'hash',                            'type' => 'string',                            'description' => 'The hash of url.',                            'source' => array('param' => 'hash'),                            'optional' => False,                        ),                        array(                            'name' => 'page',                            'type' => 'int',                            'description' => 'The page of list.',                            'source' => array('param' => 'page'),                            'optional' => TRUE,                            'default value' => 0,                        ),                        array(                            'name' => 'version',                            'type' => 'int',                            'description' => 'The version of app.',                            'source' => array('param' => 'version'),                            'optional' => TRUE,                            'default value' => 0,                        ),                    ),                ),		        'retrieve' => array(                    'help' => 'Retrieve a pedia',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'pedia_resource'),                    'callback' => 'pedia_resource_retrieve',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'hash',                            'type' => 'string',                            'description' => 'The hash of url.',                            'source' => array('param' => 'hash'),                            'optional' => False,                        ),                        array(                            'name' => 'nid',                            'optional' => FALSE,                            'source' => array('path' => 0),                            'type' => 'int',                            'description' => 'The nid of the pedia to retrieve',                        ),                        array(                            'name' => 'version',                            'type' => 'int',                            'description' => 'The version of app.',                            'source' => array('param' => 'version'),                            'optional' => TRUE,                            'default value' => 0,                        ),                    ),                ),            ),		    'actions' => array(),		    'targeted_actions' => array(),		    'relationships' => array(		        'advisors' => array(                    'help' => 'List of advisors of the pedia',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'pedia_resource'),                    'callback' => 'pedia_resource_advisors_list',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'hash',                            'type' => 'string',                            'description' => 'The hash of url.',                            'source' => array('param' => 'hash'),                            'optional' => False,                        ),                        array(                            'name' => 'nid',                            'optional' => FALSE,                            'source' => array('path' => 0),                            'type' => 'int',                            'description' => 'The nid of the pedia for getting its advisors',                        ),                        array(                            'name' => 'version',                            'type' => 'int',                            'description' => 'The version of app.',                            'source' => array('param' => 'version'),                            'optional' => TRUE,                            'default value' => 0,                        ),                    ),                ),            ),        ),		'news' => array(		    'operations' => array(                'index' => array(                    'help' => 'return the news',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'news_resource'),                    'callback' => 'news_resource_index',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'hash',                            'type' => 'string',                            'description' => 'The hash of url.',                            'source' => array('param' => 'hash'),                            'optional' => False,                        ),                        array(                            'name' => 'domain',                            'type' => 'string',                            'description' => 'The domain of list.',                            'source' => array('param' => 'domain'),                            'optional' => False,                        ),                        array(                            'name' => 'page',                            'type' => 'int',                            'description' => 'The page of list.',                            'source' => array('param' => 'page'),                            'optional' => TRUE,                            'default value' => 0,                        ),                        array(                            'name' => 'version',                            'type' => 'int',                            'description' => 'The version of app.',                            'source' => array('param' => 'version'),                            'optional' => TRUE,                            'default value' => 0,                        ),                    ),                ),                'retrieve' => array(                'help' => 'Retrieve a news',                'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'news_resource'),                'callback' => 'news_resource_retrieve',                'access callback' => 'user_access',                'access arguments' => array('access content'),                'access arguments append' => FALSE,                'args' => array(                    array(                        'name' => 'hash',                        'type' => 'string',                        'description' => 'The hash of url.',                        'source' => array('param' => 'hash'),                        'optional' => False,                    ),                    array(                        'name' => 'nid',                        'optional' => FALSE,                        'source' => array('path' => 0),                        'type' => 'int',                        'description' => 'The nid of the pedia to retrieve',                    ),                    array(                        'name' => 'version',                        'type' => 'int',                        'description' => 'The version of app.',                        'source' => array('param' => 'version'),                        'optional' => TRUE,                        'default value' => 0,                    ),                ),            ),            ),        ),        'user' => array(            'actions' => array(                'login2' => array(                    'help' => 'Login a user for a new session',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'user_resource'),                    'callback' => 'user_resource_login',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'hash',                            'type' => 'string',                            'description' => 'The hash of url.',                            'source' => array('data' => 'hash'),                            'optional' => False,                        ),                        array(                            'name' => 'user_name_email',                            'type' => 'string',                            'description' => 'A valid username',                            'source' => array('data' => 'user_name_email'),                            'optional' => FALSE,                        ),                        array(                            'name' => 'password',                            'type' => 'string',                            'description' => 'A valid password',                            'source' => array('data' => 'password'),                            'optional' => FALSE,                        ),                        array(                            'name' => 'version',                            'type' => 'int',                            'description' => 'The version of app.',                            'source' => array('data' => 'version'),                            'optional' => TRUE,                            'default value' => 0,                        ),                    ),                ),            ),            'relationships' => array(                'purchased_products' => array(                    'help' => 'list of product that the user bought',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'user_resource'),                    'callback' => 'user_resource_purchased_products_list',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'hash',                            'type' => 'string',                            'description' => 'The hash of url.',                            'source' => array('param' => 'hash'),                            'optional' => False,                        ),                        array(                            'name' => 'uid',                            'optional' => FALSE,                            'source' => array('path' => 0),                            'type' => 'int',                            'description' => 'The uid of the user for getting list',                        ),                        array(                            'name' => 'version',                            'type' => 'int',                            'description' => 'The version of app.',                            'source' => array('param' => 'version'),                            'optional' => TRUE,                            'default value' => 0,                        ),                    ),                )            ),        ),        'latin_news' => array(            'operations' => array(                'index' => array(                    'help' => 'return all latin news',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'latin_news_resource'),                    'callback' => 'latin_news_resource_index',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'hash',                            'type' => 'string',                            'description' => 'The hash of url.',                            'source' => array('param' => 'hash'),                            'optional' => False,                        ),                        array(                            'name' => 'page',                            'type' => 'int',                            'description' => 'The page of list.',                            'source' => array('param' => 'page'),                            'optional' => TRUE,                            'default value' => 0,                        ),                        array(                            'name' => 'version',                            'type' => 'int',                            'description' => 'The version of app.',                            'source' => array('param' => 'version'),                            'optional' => TRUE,                            'default value' => 0,                        ),                    ),                ),                'retrieve' => array(                    'help' => 'retrieve a latin news',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'latin_news_resource'),                    'callback' => 'latin_news_resource_retrieve',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'hash',                            'type' => 'string',                            'description' => 'The hash of url.',                            'source' => array('param' => 'hash'),                            'optional' => False,                        ),                        array(                            'name' => 'nid',                            'optional' => FALSE,                            'source' => array('path' => 0),                            'type' => 'int',                            'description' => 'The nid of the news to retrieve',                        ),                        array(                            'name' => 'version',                            'type' => 'int',                            'description' => 'The version of app.',                            'source' => array('param' => 'version'),                            'optional' => TRUE,                            'default value' => 0,                        ),                    ),                ),            ),        ),		'advisorlist' => array(			'operations' => array(				'index' => array(					'help' => 'get list of advisor users',					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),					'callback' => 'advisor_list',					'access callback' => 'user_access',					'access arguments' => array('access content'),					'access arguments append' => FALSE				)			),            'actions' => array(                'info' => array(                    'help' => 'return list of advisors',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),                    'callback' => 'advisors_info',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'page',                            'optional' => TRUE,                            'type' => 'int',                            'description' => 'The zero-based index of the page to get, defaults to 0.',                            'default value' => 0,                            'source' => array('data' => 'page'),                        )                    )                ),            ),		),        'taxonomy_term' => array(            'relationships' => array(                'information' => array(                    'help' => 'get expert information',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),                    'callback' => 'taxonomy_information',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'tid',                            'optional' => False,                            'type' => 'int',                            'description' => 'tid',                            'source' => array('path' => 0),                        )                    )                ),            ),        ),		'node' => array(			'actions' => array(				'all_questions' => array(					'help' => 'get all questions',					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),					'callback' => 'get_questions',					'access callback' => 'user_access',					'access arguments' => array('access content'),					'access arguments append' => FALSE,					'args' => array(						array(						  'name' => 'url',						  'optional' => TRUE,						  'type' => 'string',						  'description' => 'url',						  'source' => array('data' => 'url'),						  'default value' => "all_questions",						),						array(							'name' => 'page',							'optional' => TRUE,							'type' => 'int',							'description' => 'The zero-based index of the page to get, defaults to 0.',							'default value' => 0,							'source' => array('data' => 'page'),						)					)				),				'my_questions' => array(					'help' => 'get users questions',					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),					'callback' => 'get_questions',					'access callback' => 'user_access',					'access arguments' => array('access content'),					'access arguments append' => FALSE,					'args' => array(						array(						  'name' => 'url',						  'optional' => TRUE,						  'type' => 'string',						  'description' => 'url',						  'source' => array('data' => 'url'),						  'default value' => "my_questions",						),						array(							'name' => 'page',							'optional' => TRUE,							'type' => 'int',							'description' => 'The zero-based index of the page to get, defaults to 0.',							'default value' => 0,							'source' => array('data' => 'page'),						)					)				),				'following_questions' => array(					'help' => 'get user following questions',					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),					'callback' => 'get_questions',					'access callback' => 'user_access',					'access arguments' => array('access content'),					'access arguments append' => FALSE,					'args' => array(						array(						  'name' => 'url',						  'optional' => TRUE,						  'type' => 'string',						  'description' => 'url',						  'source' => array('data' => 'url'),						  'default value' => "following_questions",						),						array(							'name' => 'page',							'optional' => TRUE,							'type' => 'int',							'description' => 'The zero-based index of the page to get, defaults to 0.',							'default value' => 0,							'source' => array('data' => 'page'),						)					)				),				'my_experts_questions' => array(					'help' => 'get related to user experts questions',					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),					'callback' => 'get_questions',					'access callback' => 'user_access',					'access arguments' => array('access content'),					'access arguments append' => FALSE,					'args' => array(						array(						  'name' => 'url',						  'optional' => TRUE,						  'type' => 'string',						  'description' => 'url',						  'source' => array('data' => 'url'),						  'default value' => "my_experts_questions",						),						array(							'name' => 'page',							'optional' => TRUE,							'type' => 'int',							'description' => 'The zero-based index of the page to get, defaults to 0.',							'default value' => 0,							'source' => array('data' => 'page'),						)					)				),                'my_answered_questions' => array(                    'help' => 'get related to user experts questions',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),                    'callback' => 'my_answered_questions',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'page',                            'optional' => TRUE,                            'type' => 'int',                            'description' => 'The zero-based index of the page to get, defaults to 0.',                            'default value' => 0,                            'source' => array('data' => 'page'),                        )                    )                ),				'pedia' => array(					'help' => 'get all pedia',					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),					'callback' => 'get_pedia',					'access callback' => 'user_access',					'access arguments' => array('access content'),					'access arguments append' => FALSE,					'args' => array(						array(							'name' => 'page',							'optional' => TRUE,							'type' => 'int',							'description' => 'The zero-based index of the page to get, defaults to 0.',							'default value' => 0,							'source' => array('data' => 'page'),						)					)				),			),						'targeted_actions' => array(				'edit' => array(					'help' => 'edit a node',					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),					'callback' => 'node_edit',					'access callback' => 'user_access',					'access arguments' => array('access content'),					'access arguments append' => FALSE,					'args' => array(						array(							'name' => 'nid',							'optional' => FALSE,							'source' => array('path' => 0),							'type' => 'int',							'description' => 'The nid of the node to for edit',						),						array(							'name' => 'data',							'type' => 'array',							'description' => 'The question object with updated information',							'source' => 'data',							'optional' => FALSE,						)					),				),								'follow' => array(					'help' => 'followand unfollow',					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),					'callback' => 'follow_unfollow',					'access callback' => 'user_access',					'access arguments' => array('access content'),					'access arguments append' => FALSE,					'args' => array(						array(							'name' => 'nid',							'optional' => FALSE,							'source' => array('path' => 0),							'type' => 'int',							'description' => 'The nid of the node to for follow',						),						array(							'name' => 'data',							'type' => 'array',							'description' => 'The question object with updated information',							'source' => 'data',							'optional' => FALSE,						)					),				),								'vote' => array(					'help' => 'question vote up and down',					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),					'callback' => 'question_vote_up_down',					'access callback' => 'user_access',					'access arguments' => array('access content'),					'access arguments append' => FALSE,					'args' => array(						array(							'name' => 'nid',							'optional' => FALSE,							'source' => array('path' => 0),							'type' => 'int',							'description' => 'The nid of the node to for vote',						),						array(							'name' => 'data',							'type' => 'array',							'description' => 'The question object with updated information',							'source' => 'data',							'optional' => FALSE,						)					),				),			),            'relationships' => array(                'pedia_advisor' => array(                    'help' => 'advisors of a pedia',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),                    'callback' => 'pedia_advisor',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args'     => array(                        array(                            'name' => 'nid',                            'optional' => FALSE,                            'source' => array('path' => 0),                            'type' => 'int',                            'description' => 'The nid of the pedia that we are getting its advisors',                        ),                    ),                ),            ),		),		'comment' => array(			'targeted_actions' => array(				'edit' => array(					'help' => 'edit a comment',					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),					'callback' => 'comment_edit',					'access callback' => 'user_access',					'access arguments' => array('access content'),					'access arguments append' => FALSE,					'args' => array(						array(							'name' => 'cid',							'optional' => FALSE,							'source' => array('path' => 0),							'type' => 'int',							'description' => 'The cid of the comment to for edit',						),						array(							'name' => 'data',							'type' => 'array',							'description' => 'The vote action',							'source' => 'data',							'optional' => FALSE,						)					),				),								'vote' => array(					'help' => 'comment vote up and down',					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),					'callback' => 'comment_vote_up_down',					'access callback' => 'user_access',					'access arguments' => array('access content'),					'access arguments append' => FALSE,					'args' => array(						array(							'name' => 'cid',							'optional' => FALSE,							'source' => array('path' => 0),							'type' => 'int',							'description' => 'The cid of the comment to for vote',						),						array(							'name' => 'data',							'type' => 'array',							'description' => 'The vote action',							'source' => 'data',							'optional' => FALSE,						)					),				),								'prove_advisor' => array(					'help' => 'prove a comment by advisor',					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),					'callback' => 'comment_prove_by_advisor',					'access callback' => 'user_access',					'access arguments' => array('access content'),					'access arguments append' => FALSE,					'args' => array(						array(							'name' => 'cid',							'optional' => FALSE,							'source' => array('path' => 0),							'type' => 'int',							'description' => 'The cid of the comment to for prove',						),						array(							'name' => 'data',							'type' => 'array',							'description' => 'The prove action',							'source' => 'data',							'optional' => True,						)					),				),								'prove_asker' => array(					'help' => 'prove a comment by asker',					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),					'callback' => 'comment_prove_by_asker',					'access callback' => 'user_access',					'access arguments' => array('access content'),					'access arguments append' => FALSE,					'args' => array(						array(							'name' => 'cid',							'optional' => FALSE,							'source' => array('path' => 0),							'type' => 'int',							'description' => 'The cid of the comment to for prove',						),						array(							'name' => 'data',							'type' => 'array',							'description' => 'The prove action',							'source' => 'data',							'optional' => True,						)					),				),			),		),		'slideshow' => array(			'operations' => array(				'index' => array(					'help' => 'get slideshow items of saze page',					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),					'callback' => 'slideshow_items',					'access callback' => 'user_access',					'access arguments' => array('access content'),					'access arguments append' => FALSE				)			)		),		'calendar' => array(			'operations' => array(				'index' => array(					'help' => 'get calendar items of front page',					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),					'callback' => 'calendar_items',					'access callback' => 'user_access',					'access arguments' => array('access content'),					'access arguments append' => FALSE				)			)		),		'front_news' => array(			'operations' => array(				'index' => array(					'help' => 'get front_news items',					'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),					'callback' => 'front_news_items',					'access callback' => 'user_access',					'access arguments' => array('access content'),					'access arguments append' => FALSE				)			)		),        'file' => array(            'actions' => array(                'create_file' => array(                    'help' => 'Create a file with raw data.',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),                    'callback' => 'create_file',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                ),            ),        ),        'pbd' => array(            'operations' => array(                'index' => array(                    'help' => 'insert email for latin site',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),                    'callback' => 'latin_insert_email',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'email',                            'optional' => False,                            'type' => 'string',                            'description' => 'the user email',                            'source' => array('param' => 'email'),                        ),                    ),                ),            ),            'actions' => array(                'insert_mail' => array(                    'help' => 'insert email for latin site',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),                    'callback' => 'latin_insert_email',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'email',                            'optional' => False,                            'type' => 'string',                            'description' => 'the user email',                            'source' => array('data' => 'email'),                        ),                    ),                ),            ),        ),        'test' => array(            'operations' => array(                'index' => array(                    'help' => '',                    'file' => array('type' => 'inc', 'module' => 'custom_services', 'name' => 'custom_services'),                    'callback' => 'test',                    'access callback' => 'user_access',                    'access arguments' => array('access content'),                    'access arguments append' => FALSE,                    'args' => array(                        array(                            'name' => 'hash',                            'optional' => False,                            'type' => 'string',                            'description' => 'hash code',                            'source' => array('param' => 'hash'),                        ),                    ),                ),            ),        ),	);}function custom_services_form_alter(&$form, &$form_state, &$form_id){    if($form_id == "user_register_form"){        $path = arg(0);        if(strcmp($path, "android") == 0){            unset($form['captcha']);        }    }}function hash_true($hash , $resource){    $new_hash = hash_hmac("sha256" , $resource , "@Civil808Android@Saze808@" , false);    if(strcmp($hash, $new_hash) == 0) return true;    return false;}function user_information($uids = array()){    $query = db_select('users' , 'u');    $query->leftJoin('file_managed' , 'f' , 'u.picture = f.fid');    $query->fields('u' , array('uid' , 'name' , 'mail'));    $query->addField('f' , 'uri' , 'picture');    if(!empty($uids)) $query->condition('u.uid', $uids, 'IN');    $result = $query->execute()->fetchAll();    return $result;}