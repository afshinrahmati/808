<?php
/**
 * Implements hook_schema().
 */
function custom_services_schema() {
    $schema['api_app_version'] = array(
        'fields' => array(
            'id' => array(
                'type' => 'serial',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'description' => t('Primary Key : id'),
            ),
            'vid' => array(
                'type' => 'varchar',
                'length' => 40,
                'not null' => TRUE,
                'default' => '',
                'description' => t('Unique Version of app'),
            ),
            'description' => array(
                'type' => 'text',
                'not null' => False,
                'description' => t('Description about this version'),
            ),
            'force_update' => array(
                'type' => 'int',
                'not null' => False,
                'default' => 0,
                'description' => t('This version should update'),
            ),
            'update_link' => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => False,
                'default' => '',
                'description' => t('This link of new version'),
            ),
            'ebook_key' => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => False,
                'default' => '',
                'description' => t('key code for decrypt e-books'),
            ),
            'app_type' => array(
                'type' => 'varchar',
                'length' => 40,
                'not null' => TRUE,
                'default' => '',
                'description' => t('The type of apps'),
            ),
            'created' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
                'description' => 'Timestamp for when new version was created.',
            ),
        ),

        'primary key' => array('id'),
        'unique keys' => array(
            'unique_fields' => array('vid' , 'app_type'),
        ),
    );

    return $schema;
}


/**
 * Create new database table {api_code_version}.
 */
function custom_services_update_7102() {
    $schema['api_code_version'] = array(
        'fields' => array(
            'id' => array(
                'type' => 'serial',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'description' => t('Primary Key : id'),
            ),
            'url' => array(
                'type' => 'varchar',
                'length' => 100,
                'not null' => TRUE,
                'default' => '',
                'description' => t('url api'),
            ),
            'source_name' => array(
                'type' => 'varchar',
                'length' => 60,
                'not null' => True,
                'default' => '',
                'description' => t('The name of the request sender'),
            ),
            'version' => array(
                'type' => 'varchar',
                'length' => 20,
                'not null' => True,
                'default' => '',
                'description' => t('The version number'),
            ),
            'last_function' => array(
                'type' => 'varchar',
                'length' => 100,
                'not null' => TRUE,
                'default' => '',
                'description' => t('The name of the last function that is compatible for this version'),
            ),
            'created' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
                'description' => 'Timestamp for when new version was created.',
            ),
        ),

        'primary key' => array('id'),
        'unique keys' => array(
            'unique_fields' => array('url' , 'source_name' , 'version'),
        ),
    );
    db_create_table('api_code_version', $schema['api_code_version']);
}

/**
 * Add description field to {api_code_version} table.
 */
function custom_services_update_7103() {
    $newCol = array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => "description",
    );
    db_add_field('api_code_version', 'description', $newCol);
}
function custom_services_update_7104() {
    $newCol = array(
        'type' => 'varchar',
        'length' => 20,
        'not null' => True,
        'default' => '',
        'description' => t('The method of the request'),
    );
    db_add_field('api_code_version', 'method', $newCol);
}

/**
 * Create new database table {app_log}.
 */
function custom_services_update_7105() {
    $schema['app_log'] = array(
        'fields' => array(
            'id' => array(
                'type' => 'serial',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'description' => t('Primary Key : id'),
            ),
            'uid' => array(
                'type' => 'int',
                'not null' => TRUE,
                'unsigned' => TRUE,
                'size' => 'small',
                'default' => 0,
                'description' => t('user id'),
            ),
            'url' => array(
                'type' => 'varchar',
                'length' => 100,
                'not null' => TRUE,
                'default' => '',
                'description' => t('url api'),
            ),
            'action' => array(
                'type' => 'text',
                'size' => 'normal',
                'not null' => TRUE,
                'description' => t('The action that is happened'),
            ),
            'entity_type' => array(
                'type' => 'varchar',
                'length' => 60,
                'not null' => False,
                'default' => '',
                'description' => t('The entity type'),
            ),
            'entity_id' => array(
                'type' => 'int',
                'not null' => False,
                'unsigned' => TRUE,
                'default' => 0,
                'description' => t('The id of content that user has effected on it'),
            ),
            'app_name' => array(
                'type' => 'varchar',
                'length' => 60,
                'not null' => TRUE,
                'default' => '',
                'description' => t('The name of the app'),
            ),
            'app_version' => array(
                'type' => 'varchar',
                'length' => 60,
                'not null' => TRUE,
                'default' => '',
                'description' => t('The version of the app'),
            ),
            'created' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
                'description' => 'Timestamp for when an action has been happened.',
            ),
        ),

        'primary key' => array('id'),
    );
    db_create_table('app_log', $schema['app_log']);
}
/**
 * Add status and description field to {app_log} table.
 */
function custom_services_update_7106() {
    $newCol = array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE,
        'default' => '',
        'description' => t("status of action"),
    );
    db_add_field('app_log', 'status', $newCol);

    $newCol = array(
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
        'description' => t('description'),
    );
    db_add_field('app_log', 'description', $newCol);
}

/**
 * Create new database table {app_notification_token}.
 */
function custom_services_update_7107() {
    $schema['app_notification_token'] = array(
        'fields' => array(
            'id' => array(
                'type' => 'serial',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'description' => t('Primary Key : id'),
            ),
            'uid' => array(
                'type' => 'int',
                'not null' => TRUE,
                'unsigned' => TRUE,
                'size' => 'small',
                'default' => 0,
                'description' => t('user id'),
            ),
            'token' => array(
                'type' => 'varchar',
                'length' => 255,
                'not null' => TRUE,
                'default' => '',
                'description' => t('Token'),
            ),
            'time' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
                'description' => 'Timestamp for when an action has been happened.',
            ),
        ),

        'primary key' => array('id'),
    );
    db_create_table('app_notification_token', $schema['app_notification_token']);
}
/**
 * Add serial field to {app_notification_token} table.
 */
function custom_services_update_7108() {
    $newCol = array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t("serial of phone device"),
    );
    db_add_field('app_notification_token', 'serial', $newCol);
    db_add_unique_key('app_notification_token', 'unique_fields', array('serial'));
}
/**
 * Create new database table {desktop_lock_encryption}.
 */
function custom_services_update_7109(){
    $schema['desktop_lock_encryption'] = array(
        'fields' => array(
            'id' => array(
                'type' => 'serial',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'description' => t('Primary Key : id'),
            ),
            'nid' => array(
                'type' => 'int',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'description' => t('node_foreign_key'),
            ),
            'title' => array(
                'type' => 'varchar',
                'length' => 256,
                'not null' => TRUE,
                'default' => '',
                'description' => t('title_of_film'),
            ),
            'password' => array(
                'type' => 'varchar',
                'length' => 64,
                'not null' => TRUE,
                'default' => '',
                'description' => t('password of encryption'),
            ),
            'name' => array(
                'type' => 'varchar',
                'length' => 256,
                'not null' => True,
                'default' => '',
                'description' => t('Name of file'),
            ),
            'extension' => array(
                'type' => 'varchar',
                'length' => 20,
                'not null' => True,
                'default' => '',
                'description' => t('Extension of file'),
            ),
            'new_name' => array(
                'type' => 'varchar',
                'length' => 64,
                'not null' => True,
                'default' => '',
                'description' => t('New name of file with hash code'),
            ),
            'new_extension' => array(
                'type' => 'varchar',
                'length' => 20,
                'not null' => True,
                'default' => '',
                'description' => t('New extension of file with hash code'),
            ),
            'uid' => array(
                'type' => 'int',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'description' => t('uid of the user who inserts the film'),
            ),
            'fid' => array(
                'type' => 'int',
                'unsigned' => TRUE,
                'not null' => TRUE,
                'description' => t('file_managed table fid foreign_key'),
            ),
            'active' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 1,
                'description' => t('Is this film active for user to download'),
            ),
            'created' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
                'description' => 'Timestamp for when new encrypt file was created.',
            ),
            'updated' => array(
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
                'description' => 'Timestamp for when new encrypt file was updated.',
            ),
            'description' => array(
                'type' => 'text',
                'size' => 'normal',
                'not null' => FALSE,
                'description' => t('Any description about this record'),
            )
        ),

        'primary key' => array('id'),
        'unique keys' => array(
            'unique' => array('fid' , 'new_name'),
        ),
    );
    db_create_table('desktop_lock_encryption', $schema['desktop_lock_encryption']);
}

/*
 * Implementation of hook_install()
*/
function custom_services_install() {
    $success = drupal_install_schema('custom_services');
    if ($success) {
        drupal_set_message(st('custom_services module installed successfully.'));
    }
    else {
        drupal_set_message(st('The installation of custom_services module failed.'), 'error');
    }
}

/*
 * Implementation of hook_uninstall()
*/
function custom_services_uninstall() {
    $success = drupal_uninstall_schema('custom_services');
    if ($success) {
        drupal_set_message(st('custom_services module uninstalled successfully.'));
    }
    else {
        drupal_set_message(st('The uninstall of custom_services module failed.'), 'error');
    }
}